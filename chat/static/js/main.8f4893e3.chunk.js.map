{"version":3,"sources":["Class/Data.js","firebase/firebase.js","Chat/Message/Message.jsx","Chat/PostBox/PostBox.jsx","Chat/TopBox/TopBox.jsx","Chat/Chat.jsx","Home/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Code","User","JoC","console","dir","this","localStorage","setItem","JSON","stringify","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","DB","firestore","Message","require","props","state","userIsSender","bind","temp","parse","getItem","i","length","ID","splice","collection","doc","update","Messages","onSnapshot","data","forceUpdate","log","user","id","onClick","handleClick","className","removeItem","Component","PostBox","postMessage","msg","postData","Math","floor","random","get","then","push","document","getElementById","value","e","setState","target","typing","setTimeout","onChange","triggerTyping","handleTextChange","handleSubmit","TopBox","Typer","set","window","location","pathname","clearChat","logOut","Chat","Data","loadData","change","result","elem","scrollTop","scrollHeight","map","React","Home","name","Form","onSubmit","StartChat","Control","placeholder","Button","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8f4893e3.chunk.js","sourcesContent":["class Data {\r\n    Code = '';\r\n    User = '';\r\n    JoC = '';\r\n\r\n    constructor(){\r\n      console.dir(this);\r\n    }\r\n  \r\n    get getCode() {\r\n      return this.Code;\r\n    }\r\n  \r\n    get getUser() {\r\n      return this.User;\r\n    }\r\n  \r\n    get getData() {\r\n      return {Code: this.Code, User: this.User};\r\n    }\r\n\r\n    saveData() {\r\n      localStorage.setItem('Data', JSON.stringify({User: this.User}))\r\n    }\r\n\r\n    loadData() {\r\n      //  this.Code = JSON.parse(localStorage.getItem('Data')).Code;\r\n      //  this.User = JSON.parse(localStorage.getItem('Data')).User;\r\n      //  this.JoC = JSON.parse(localStorage.getItem('Data')).JoC;\r\n\r\n       return {Code: this.Code, User: this.User, JoC: this.JoC};\r\n    }\r\n  \r\n    setData(Code, User) {\r\n      this.Code = Code;\r\n      this.User = User;\r\n    }\r\n\r\n    setCode(Code) {\r\n        this.Code = Code;\r\n    }\r\n\r\n    setUser(User) {\r\n        this.User = User;\r\n    }\r\n  }\r\n\r\n  export default new Data();","import firebase from 'firebase';\r\nimport 'firebase/firestore';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyARoXtJEIlDaKw966uNhUx0mPYcNGqvmBA\",\r\n  authDomain: \"chat-application-564d6.firebaseapp.com\",\r\n  databaseURL: \"https://chat-application-564d6.firebaseio.com\",\r\n  projectId: \"chat-application-564d6\",\r\n  storageBucket: \"chat-application-564d6.appspot.com\",\r\n  messagingSenderId: \"725451449206\",\r\n  appId: \"1:725451449206:web:87ea66422071f65c209057\",\r\n  measurementId: \"G-NHSTVF6FRZ\"\r\n};\r\n\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  const DB = firebase.firestore();\r\n\r\n  export default DB;\r\n","import './Message.css'\r\nimport React, { Component } from 'react'\r\n\r\nimport DB from '../../firebase/firebase';\r\nimport { ToggleButtonGroup } from 'react-bootstrap';\r\nconst Sugar = require('sugar');\r\n\r\nexport default class Message extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.props;\r\n\r\n        this.userIsSender = this.userIsSender.bind(this);\r\n    }\r\n\r\n    removeItem() {\r\n        var temp = JSON.parse(localStorage.getItem('msg'));\r\n        // temp.filter(x => x.ID !== this.props.ID)\r\n        for(var i = 0; i < temp.length; i++) {\r\n            if(temp[i].ID === this.props.ID) {\r\n                temp.splice(i, 1);\r\n            }\r\n        }\r\n        console.dir(temp);\r\n        DB.collection('Rooms').doc('Chat').update({Messages: temp});\r\n    }\r\n\r\n    componentDidMount() {\r\n        DB.collection('Rooms').doc(\"Chat\").onSnapshot(data=>{\r\n            this.forceUpdate();\r\n        })\r\n    }\r\n    \r\n    handleClick() {\r\n        console.log(\"Chat\", (this.props.ID));\r\n    }\r\n\r\n    userIsSender(user) {\r\n        // eslint-disable-next-line no-unused-expressions\r\n        if(user === localStorage.getItem('User')) {\r\n            return 'Sender';\r\n        }else if(user === 'Admin'){\r\n            return 'Admin'\r\n        }else{\r\n            return 'Receiver';\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Container\"  onClick={this.handleClick.bind(this)}>\r\n            <div id=\"User\" className={this.userIsSender(this.props.User)}>{this.props.User}</div>\r\n            <div id=\"msg\">{this.props.Message}</div>\r\n            {(this.props.User === localStorage.getItem('User')) ? <button id=\"delete\" onClick={this.removeItem.bind(this)}>Delete</button> : false}\r\n            <br></br>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import './PostBox.css';\r\nimport React, { Component } from 'react'\r\n\r\nimport DB from '../../firebase/firebase';\r\n\r\nexport default class PostBox extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            Message: '',\r\n            User: localStorage.getItem('User'),\r\n            DB: DB.collection('Rooms').doc(\"Chat\")\r\n        }\r\n    }\r\n\r\n    handleTextChange(e) {\r\n        this.setState({Message: e.target.value})\r\n        // this.triggerTyping.bind(this);\r\n    }\r\n\r\n    handleSubmit() {\r\n        console.log(this.state);\r\n        this.postMessage(this.state.User, this.state.Message)\r\n    }\r\n\r\n    postMessage = (user, msg) => {\r\n        // let temp = this.state.Chat;\r\n        // temp.push({Message: msg, User: user});\r\n        var postData = {\r\n            Message: msg,\r\n            User: user,\r\n            ID: Math.floor(Math.random() * 9999999)\r\n        }\r\n\r\n        this.state.DB.get().then(data=>{\r\n            let temp = data.data().Messages;\r\n            temp.push(postData);\r\n            this.state.DB.update({Messages: temp})\r\n        })\r\n\r\n        document.getElementById('messageB').value = '';\r\n        // this.state.DB.update(postData)\r\n        \r\n    }\r\n\r\n    triggerTyping() {\r\n        let typing = true;\r\n        setTimeout(function() {\r\n            typing = false;\r\n            // const result = {typing: typing, User: this.props.User}\r\n            DB.collection('Rooms').doc('Chat').update({typing: {typing: typing, User: localStorage.getItem('User')}})\r\n            console.log(\"finished\")\r\n        }, 5000)\r\n\r\n        if(typing) {\r\n            // const result = {typing: typing, User: this.props.User}\r\n            DB.collection('Rooms').doc('Chat').update({typing: {typing: typing, User: this.state.User}})\r\n            console.log(\"typing\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='container' onChange={this.triggerTyping.bind(this)}>\r\n                <textarea id=\"messageB\" onChange={this.handleTextChange.bind(this)}></textarea>\r\n                <button onClick={this.handleSubmit.bind(this)}>Send</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import './TopBox.css'\r\nimport React, { Component } from 'react'\r\n\r\nimport DB from '../../firebase/firebase';\r\n\r\nexport default class TopBox extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.postMessage = this.postMessage.bind(this);\r\n        this.state = {\r\n            DB: DB.collection('Rooms').doc('Chat'),\r\n            typing: false,\r\n            Typer: ''\r\n        }\r\n\r\n        this.state.DB.onSnapshot(typing=>{\r\n            console.log(typing.data().typing);\r\n            this.setState({typing: typing.data().typing.typing})\r\n            this.setState({Typer: typing.data().typing.User})\r\n        })\r\n    }\r\n\r\n    clearChat() {\r\n        DB.collection('Rooms').doc('Chat').set({Messages: []})\r\n    }\r\n\r\n    logOut() {\r\n        setTimeout(\r\n            this.postMessage('Admin', `${localStorage.getItem('User')} has left the chat`)\r\n        , 1000)\r\n        \r\n        localStorage.setItem('User', null);\r\n        window.location.pathname = ''; \r\n    }\r\n\r\n    postMessage = (user, msg) => {\r\n        // let temp = this.state.Chat;\r\n        // temp.push({Message: msg, User: user});\r\n        var postData = {\r\n            Message: msg,\r\n            User: user\r\n        }\r\n\r\n        this.state.DB.get().then(data=>{\r\n            let temp = data.data().Messages;\r\n            temp.push(postData);\r\n            this.state.DB.update({Messages: temp})\r\n        })\r\n        // this.state.DB.update(postData)\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='TopBox'>\r\n                <div id=\"typing\">{(this.state.typing ? `${this.state.Typer} is typing` : \"\")}</div>\r\n                {(localStorage.getItem('User') === 'Roee') ? <button id=\"clearchat\" onClick={this.clearChat.bind(this)}>Clear Chat</button> : '' }\r\n                <button id=\"logout\" onClick={this.logOut.bind(this)}>Log Out</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","/* eslint-disable react/no-direct-mutation-state */\r\nimport './Chat.css';\r\nimport React from 'react';\r\n\r\nimport firebase from 'firebase';\r\nimport Data from '../Class/Data';\r\nimport DB from '../firebase/firebase';\r\n\r\nimport Message from './Message/Message.jsx'\r\nimport PostBox from './PostBox/PostBox.jsx'\r\nimport TopBox from './TopBox/TopBox.jsx';\r\n\r\nexport default class Chat extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            Code: \"Chat\",\r\n            Chat: [],\r\n            DB: DB.collection('Rooms').doc(\"Chat\")\r\n        }\r\n\r\n        console.dir(Data.loadData());\r\n        this.state.DB.onSnapshot((change) => {\r\n            const result = change.data().Messages;\r\n            this.setState({Chat: result})\r\n            console.dir(this.state);\r\n            var elem = document.getElementById('style-3');\r\n            elem.scrollTop = elem.scrollHeight;\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.state.DB.get().then(data=>{\r\n            console.dir(data.data())\r\n            this.setState({Chat: data.data().Messages})\r\n            localStorage.setItem('msg', JSON.stringify(this.state.Chat));\r\n            this.forceUpdate();\r\n        })\r\n    }\r\n\r\n    postMessage = (user, msg, ID) => {\r\n        // let temp = this.state.Chat;\r\n        // temp.push({Message: msg, User: user});\r\n        const num = Math.floor(Math.random() * 9999999);\r\n        var postData = {\r\n            Message: msg,\r\n            User: user,\r\n            ID: ID\r\n        }\r\n\r\n        this.state.DB.get().then(data=>{\r\n            let temp = data.data().Messages;\r\n            temp.push(postData);\r\n            this.state.DB.update({Messages: temp})\r\n        })\r\n        // this.state.DB.update(postData)\r\n        localStorage.setItem('msg', JSON.stringify(this.state.Chat));\r\n    }\r\n\r\n    render() {\r\n        localStorage.setItem('msg', JSON.stringify(this.state.Chat));\r\n\r\n        // this.state.Chat = JSON.parse(localStorage.getItem('msg'));\r\n\r\n        // console.dir(this.state.Chat);\r\n        return(\r\n            <div>\r\n                <div className='Top'>\r\n                    <TopBox />\r\n                </div>\r\n                <div className='Chat' id=\"style-3\">\r\n                {this.state.Chat.map(data=>{\r\n                    // console.log(\"Data: \")\r\n                    // console.dir(data.Date);\r\n                    return <Message Message={data.Message} User={data.User} ID={data.ID}/>\r\n                })}\r\n               </div>\r\n               <div className='Box'>\r\n                    <PostBox />\r\n               </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import './Home.css'\r\nimport React from 'react';\r\n\r\nimport Data from '../Class/Data';\r\nimport {Form, Button} from 'react-bootstrap';\r\n\r\nimport DB from '../firebase/firebase';\r\n\r\nexport default class Home extends React.Component{\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        Data: props.Data,\r\n        Code: '',\r\n        User: '',\r\n        DB: DB.collection('Rooms').doc('Chat')\r\n      }\r\n\r\n      this.postMessage = this.postMessage.bind(this);\r\n    }\r\n\r\n    postMessage = (user, msg) => {\r\n      // let temp = this.state.Chat;\r\n      // temp.push({Message: msg, User: user});\r\n      var postData = {\r\n          Message: msg,\r\n          User: user\r\n      }\r\n\r\n      this.state.DB.collection('Rooms').doc('Chat').get().then(data=>{\r\n          let temp = data.data().Messages;\r\n          temp.push(postData);\r\n          this.state.DB.update({Messages: temp})\r\n      })\r\n      // this.state.DB.update(postData)\r\n      \r\n  }\r\n  \r\n    onChange(e) {\r\n      this.setState({\r\n        [e.target.name] : e.target.value\r\n      })\r\n      // console.dir(this.state);\r\n    }\r\n  \r\n    StartChat(e) {\r\n      if(e.target.name === \"Join\") {\r\n        console.log(\"Join\")\r\n        localStorage.setItem('User', this.state.User)\r\n      }\r\n      \r\n      \r\n      console.dir(this.state);\r\n      window.location.pathname = '/chat'\r\n    }\r\n  \r\n    render() {\r\n      // console.dir(Home.prototype.getState())\r\n      // console.dir(data.getData());\r\n      return(\r\n        <div>\r\n        <Form onSubmit={this.StartChat.bind(this)} onChange={this.onChange.bind(this)} className=\"Main\">\r\n          <Form.Control className=\"User\" name=\"User\" placeholder=\"Username\"/><br/>\r\n          <Button className=\"Button\" onClick={this.StartChat.bind(this)} name=\"Join\">Join</Button>\r\n        </Form>\r\n        </div>\r\n      )\r\n    }\r\n  }","import React from 'react';\nimport './App.css';\n\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport {Form, Button} from 'react-bootstrap';\n\nimport Chat from './Chat/Chat.jsx'\nimport Home from './Home/Home.jsx'\n\nimport Data from './Class/Data'\n\nimport DB from './firebase/firebase'\n\nclass App extends React.Component{\n  render() {\n\n\n    return(\n      <div>\n      <Router>\n      <Switch>\n        <Route exact path=\"/\" component={()=>{return(<Home Data={Data}/>)}}/>\n        <Route exact path=\"/chat\" component={()=>{return(<Chat Data={Data}/>)}}/>\n      </Switch>\n    </Router>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}