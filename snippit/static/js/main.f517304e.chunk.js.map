{"version":3,"sources":["Snippit/SnippitGenerator.js","Snippit/Form/Form.jsx","Snippit/Designer/Designer.jsx","Snippit/Snippit.jsx","App.js","serviceWorker.js","index.js"],"names":["MakeSnippit","name","pre","code","copy","require","Form","props","handleChange","e","setState","target","value","state","Name","Prefix","Code","Result","this","onChange","bind","Container","fluid","Row","id","Col","TextField","label","variant","className","Button","color","onClick","handleClear","handleCopy","multiline","rows","fullWidth","rowsMax","disabled","Component","Designer","Snippit","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iWAAe,SAASA,EAAYC,EAAMC,EAAKC,GAC3C,MAAM,UAAN,OACGF,EADH,mCAEgBC,EAFhB,8CAIWC,EAJX,6BCMJ,IAAMC,EAAOC,EAAQ,IAEAC,E,kDACjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IASVC,aAAe,SAACC,GAEZ,EAAKC,SAAL,eACKD,EAAEE,OAAOV,KAAQQ,EAAEE,OAAOC,SAX/B,EAAKC,MAAQ,CACTC,KAAM,GACNC,OAAQ,GACRC,KAAM,GACNC,OAAO,IANG,E,0DAqBdC,KAAKR,SAAS,CACVI,KAAM,GACNC,OAAQ,GACRC,KAAM,O,mCAMVZ,EAAKJ,EAAYkB,KAAKL,MAAMC,KAAMI,KAAKL,MAAME,OAAQG,KAAKL,MAAMG,S,+BAIhE,OACI,6BACA,yBAAKG,SAAUD,KAAKV,aAAaY,KAAKF,OACtC,kBAACG,EAAA,EAAD,CAAWC,OAAK,GAChB,kBAACC,EAAA,EAAD,CAAKC,GAAG,QACR,kBAACC,EAAA,EAAD,KACE,kBAACF,EAAA,EAAD,KACE,kBAACG,EAAA,EAAD,CAAWzB,KAAK,OAAO0B,MAAM,eAAeC,QAAQ,aAAa,6BAAK,8BAExE,kBAACL,EAAA,EAAD,KACE,kBAACG,EAAA,EAAD,CAAWzB,KAAK,SAAS0B,MAAM,iBAAiBC,QAAQ,aAAa,6BAAK,+BAG9E,kBAACH,EAAA,EAAD,KACI,kBAACF,EAAA,EAAD,CAAKM,UAAU,QACf,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUH,QAAQ,WAAWI,QAASd,KAAKe,YAAYb,KAAKF,OAA1E,UACM,6BAAK,6BACX,kBAACK,EAAA,EAAD,CAAKM,UAAU,QACX,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUH,QAAQ,WAAWI,QAASd,KAAKgB,WAAWd,KAAKF,OAAzE,mBAMV,6BACM,kBAACQ,EAAA,EAAD,CACIS,WAAS,EACTX,GAAG,iBACHI,QAAQ,WACRQ,KAAM,GACNC,WAAS,EACTC,QAAS,GACTX,MAAM,eACN1B,KAAK,UAGX,8BACM,6BAAK,6BACX,kBAACyB,EAAA,EAAD,CACES,WAAS,EACTX,GAAG,iBACHI,QAAQ,WACRQ,KAAM,GACNG,UAAQ,EACRF,WAAS,EACTC,QAAS,GACTX,MAAM,SACN1B,KAAK,OACLW,MAAOZ,EAAYkB,KAAKL,MAAMC,KAAMI,KAAKL,MAAME,OAAQG,KAAKL,MAAMG,a,GAnFhDwB,aCPbC,E,uKAIb,OACI,kC,GAL0BD,aCGjBE,E,uKAEb,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALqBF,aCQtB,SAASG,IAEpB,OACI,oCACE,yBAAKd,UAAU,QACb,kBAAC,EAAD,QCNQe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f517304e.chunk.js","sourcesContent":["export default function MakeSnippit(name, pre, code) {\r\n    return(`\r\n    \"${name}\": {\r\n        \"prefix\": ${pre},\r\n        \"body\": [\r\n            \"${code}\"\r\n        ]\r\n    }\r\n    `)\r\n}","import './Form.css';\r\nimport React, { Component } from 'react'\r\nimport { TextField, TextareaAutosize, Button } from '@material-ui/core';\r\nimport {Container, Row, Col} from 'react-bootstrap';\r\n\r\nimport MakeSnippit from '../SnippitGenerator';\r\n\r\nconst copy = require('clipboard-copy');\r\n\r\nexport default class Form extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            Name: '',\r\n            Prefix: '',\r\n            Code: '',\r\n            Result: ``\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        // console.log(e.target.value);\r\n        this.setState({\r\n            [e.target.name] : e.target.value\r\n        })\r\n\r\n\r\n        // console.dir(this.state)\r\n    }\r\n\r\n    handleClear() {\r\n        this.setState({\r\n            Name: '',\r\n            Prefix: '',\r\n            Code: ''\r\n        })\r\n    }\r\n\r\n\r\n    handleCopy() {\r\n        copy(MakeSnippit(this.state.Name, this.state.Prefix, this.state.Code));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n            <div onChange={this.handleChange.bind(this)}>\r\n            <Container fluid>\r\n            <Row id=\"main\">\r\n            <Col>\r\n              <Row> \r\n                <TextField name=\"Name\" label=\"Snippit Name\" variant=\"outlined\" /><br/><br/>\r\n              </Row>\r\n              <Row> \r\n                <TextField name=\"Prefix\" label=\"Snippit Prefix\" variant=\"outlined\" /><br/><br/>\r\n              </Row>\r\n            </Col>\r\n            <Col>\r\n                <Row className=\"Copy\">\r\n                <Button color=\"primary\" variant=\"outlined\" onClick={this.handleClear.bind(this)}>Clear</Button>\r\n                </Row><br/><br/>\r\n                <Row className=\"Copy\">\r\n                    <Button color=\"primary\" variant=\"outlined\" onClick={this.handleCopy.bind(this)}>Copy Result</Button>\r\n                </Row>\r\n            </Col>    \r\n            \r\n            </Row>\r\n          </Container>\r\n          <br/>\r\n                <TextField\r\n                    multiline\r\n                    id=\"outlined-basic\"\r\n                    variant=\"outlined\"\r\n                    rows={20}\r\n                    fullWidth\r\n                    rowsMax={20}\r\n                    label=\"Snippit Code\"\r\n                    name=\"Code\"\r\n                />\r\n              </div>\r\n              <div>\r\n              </div><br/><br/>\r\n              <TextField\r\n                multiline\r\n                id=\"outlined-basic\"\r\n                variant=\"outlined\"\r\n                rows={20}\r\n                disabled\r\n                fullWidth\r\n                rowsMax={20}\r\n                label=\"Result\"\r\n                name=\"Code\"\r\n                value={MakeSnippit(this.state.Name, this.state.Prefix, this.state.Code)}\r\n            /> \r\n              </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Designer extends Component {\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport Form from './Form/Form.jsx';\r\nimport Designer from './Designer/Designer.jsx';\r\n\r\nexport default class Snippit extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form />\r\n                <Designer />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import './App.css'\nimport React, { Component } from 'react'\n\nimport { ThemeProvider, createMuiTheme  } from '@material-ui/core/styles';\n\n// import darkBaseTheme from '@material-ui/core/styles/baseThemes/darkBaseTheme';\n\nimport Snippit from './Snippit/Snippit.jsx';\n\n\n\n\n\nexport default function App() {\n\n    return (\n        <>\n          <div className='main'>\n            <Snippit />\n          </div>\n        </>\n    )\n  \n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}